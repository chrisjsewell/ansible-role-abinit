# https://docs.abinit.org/INSTALL_Ubuntu/
- name: Install abinit dependencies
  become: true
  apt:
    update_cache: yes
    cache_valid_time: 36000
    name:
    # compiler
    - gfortran
    # MPI
    - openmpi-common
    - openmpi-bin
    - libopenmpi-dev
    # Linear Algebra libraries
    - libblacs-mpi-dev  # this is not yet available on ubuntu 20.04
    - libblas-dev
    - liblapack-dev
    - libscalapack-mpi-dev
    # libraries to write/read binary files in netcdf4 format
    - libhdf5-openmpi-dev
    - libnetcdf-dev
    - libnetcdff-dev
    - libpnetcdf-dev
    - netcdf-bin
    # additional build tools
    - unzip
    # - build-essential  # this would be required by ubuntu 20.04

- name: Install libxc from apt
  when: abinit_libxc_path is not defined
  become: true
  apt:
    name:
    - libxc-dev

- name: Get abinit source
  block:
  - name: "try main source url"
    get_url:
      url: "{{ abinit_url }}"
      dest: "{{ abinit_code_folder }}/{{ abinit_src_archive }}"
    register: abinit_download
    until: not abinit_download.failed
    retries: 3
    delay: 10
  rescue:
  - name: "try alternative source url"
    get_url:
      url: "{{ abinit_url_alt }}"
      dest: "{{ abinit_code_folder }}/{{ abinit_src_archive }}"
    register: abinit_download
    until: not abinit_download.failed
    retries: 3
    delay: 10

- name: Extract abinit source
  unarchive:
    src: "{{ abinit_download.dest }}"
    dest: "{{ abinit_code_folder }}"
    remote_src: true

- name: Create configuration options file
  template:
    src: configure_options.j2
    dest: "{{ abinit_code_folder }}/{{ abinit_src }}/config_options.sh"
  register: abinit_conf_options

- name: If configuration changed, remove build folder
  when: abinit_conf_options.changed
  file:
    path: "{{ abinit_code_folder }}/{{ abinit_src }}/build"
    state: absent

- name: Create build folder
  file:
    path: "{{ abinit_code_folder }}/{{ abinit_src }}/build"
    state: directory

- name: Create Makefile
  shell: |
    ../configure --with-config-file="{{ abinit_code_folder }}/{{ abinit_src }}/config_options.sh"
  args:
    chdir: "{{ abinit_code_folder }}/{{ abinit_src }}/build"
    creates: "{{ abinit_code_folder }}/{{ abinit_src }}/build/Makefile"
  register: abinit_create_make

# - name: Print configuration outcome
#   when: abinit_create_make.changed
#   debug:
#     var: abinit_create_make.stdout

- name: Check that the Makefile was created
  stat:
    path: "{{ abinit_code_folder }}/{{ abinit_src }}/build/Makefile"
  register: abinit_makefile
  failed_when: not abinit_makefile.stat.exists

- name: Make abinit executable ({{ abinit_build_cpus }} cpu)
  shell: "make -j{{ abinit_build_cpus }}"
  args:
    chdir: "{{ abinit_code_folder }}/{{ abinit_src }}/build"
    creates: "{{ abinit_built_executable }}"
  register: abinit_make

- import_tasks: tests.yml
  when: run_tests is defined and run_tests

- name: Install abinit executable
  become: true
  copy:
    src: "{{ abinit_built_executable }}"
    dest: "{{ abinit_prefix }}/bin"
    remote_src: true
    mode: '0755'
  register: abinit_install

- name: Add release notes (version)
  include_role:
    name: release_notes
  vars:
    section: "abinit"
    option: "version"
    value: "{{ abinit_version }}"
  when: release_notes is defined and release_notes

- name: Add release notes (usage)
  include_role:
    name: release_notes
  vars:
    section: "abinit"
    option: "usage"
    value: >-
      abinit is compiled and installed in {{ abinit_prefix }}.
      Simply run 'abinit'.
  when: release_notes is defined and release_notes
